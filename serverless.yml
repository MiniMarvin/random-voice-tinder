service: random-voice-tinder
# app and org for use with dashboard.serverless.com
app: random-voice-tinder
org: minimarvin

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'
useDotenv: true

plugins:
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  environment:
    AUDIOS_BUCKET: ${self:resources.Resources.AudiosBucket.Properties.BucketName}
    USERS_TABLE: ${self:resources.Resources.UsersTable.Properties.TableName}
    CHATS_TABLE: ${self:resources.Resources.ChatsTable.Properties.TableName}
    MESSAGES_TABLE: ${self:resources.Resources.MessagesTable.Properties.TableName}
    USER_POOL: random-voice-tinder-users
    USER_POOL_ID: ${env:USER_POOL_ID}
    APP_CLIENT_ID: ${env:APP_CLIENT_ID}
    POOL_REGION: ${env:POOL_REGION}
    USER_CREATION_QUEUE: ${self:resources.Resources.UserCreationQueue.Properties.QueueName}
  iamRoleStatements:
    # TODO: restrict the policy to only the used resources on specific lambda
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - s3:ListBucket
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:GetObject
      Resource: '*'

functions:
  hello:
    handler: handler.hello
    memorySize: 128
    description: Returns a welcome message
    events:
      - http:
          path: hello
          method: get
  helloAuth:
    handler: handler.hello
    memorySize: 128
    description: Returns a welcome message but only if authorized
    events:
      - http:
          path: auth/hello
          method: get
          authorizer:
            name: cognitoAuthorization
            type: COGNITO_USER_POOLS
            # identitySource: method.request.header.Authorization
            arn: 
              Fn::Join:
                - ""
                - - "arn:aws:cognito-idp:us-east-1:"
                  - Ref: AWS::AccountId
                  - ":userpool/${env:USER_POOL_ID}"
  putAudioAuth:
    handler: handler.putAudioAuth
    memorySize: 128
    description: Returns a link for uploading a file to s3.
    events:
      - http:
          path: audios/upload
          method: get
  signUp:
    handler: handler.signUp
    memorySize: 128
    description: Create an account for an user
    events:
      - http:
          path: auth/signup
          method: post
  signIn:
    handler: handler.signIn
    memorySize: 128
    description: Login registered user
    timeout: 15
    events:
      - http:
          path: auth/signin
          method: post
  enqueueUserCreation:
    handler: handler.enqueueUserCreation
    memorySize: 128
    description: enqueue user creation event, so the service can retry to create the user
    events:
      - cognitoUserPool:
          pool: ${self:provider.environment.USER_POOL}
          trigger: PostConfirmation
          existing: true


# you can add CloudFormation resource templates here
resources:
  Resources:
    AudiosBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${opt:stage, self:provider.stage}-${self:service}-audios
        Tags:
          - Key: service
            Value: ${self:service}
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage, self:provider.stage}-${self:service}-users
        BillingMode: "PAY_PER_REQUEST"
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          # - AttributeName: "name"
          #   AttributeType: "S"
          # - AttributeName: "chats"
          #   AttributeType: "SS"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        Tags:
          - Key: service
            Value: ${self:service}
    ChatsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage, self:provider.stage}-${self:service}-chats
        BillingMode: "PAY_PER_REQUEST"
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "updated_at"
            AttributeType: "S"
          # - AttributeName: "created_at"
          #   AttributeType: "S"
          # - AttributeName: "members"
          #   AttributeType: "SS"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
          - AttributeName: "updated_at"
            KeyType: "RANGE"
        Tags:
          - Key: service
            Value: ${self:service}
    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage, self:provider.stage}-${self:service}-messages
        BillingMode: "PAY_PER_REQUEST"
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
          - AttributeName: "created_at"
            AttributeType: "S"
          # - AttributeName: "chat_id"
          #   AttributeType: "SS"
          # - AttributeName: "sender_id"
          #   AttributeType: "S"
          # - AttributeName: "audio_message"
          #   AttributeType: "S"
          # - AttributeName: "time"
          #   AttributeType: "N"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
          - AttributeName: "created_at"
            KeyType: "RANGE"
        Tags:
          - Key: service
            Value: ${self:service}
    UserCreationQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${opt:stage, self:provider.stage}-${self:service}-user-creation
        DelaySeconds: 600
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - UserCreationQueueDLQ
              - Arn
          maxReceiveCount: 4
        Tags:
          - Key: service
            Value: ${self:service}
    UserCreationQueueDLQ:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${opt:stage, self:provider.stage}-${self:service}-user-creation-dlq
        Tags:
          - Key: service
            Value: ${self:service}
